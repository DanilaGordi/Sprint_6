{"name": "Проверка выпадающих ответов на вопросы о важном", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-4\" class=\"accordion__button\"> is not clickable at point (949,456) because another element <img src=\"/assets/scooter.png\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:333:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:202:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31", "trace": "self = <test_question_page.TestQuestionsPage object at 0x00000208D313EBD0>, question = ['id', 'accordion__heading-4'], answer = ['id', 'accordion__panel-4']\nright_answer = 'Пока что нет! Но если что-то срочное — всегда можно позвонить в поддержку по красивому номеру 1010.', driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"4fcf284b-a1dd-40f2-9206-87ec40849189\")>\n\n    @allure.title('Проверка выпадающих ответов на вопросы о важном')\n    @allure.description('Проверяем, что при клике на вопросы о важном 1-8 будут развёрнуты ответы')\n    @pytest.mark.parametrize('question, answer, right_answer',\n                             [\n                                 (MainSiteLocators.FIRST_QUESTION, MainSiteLocators.FIRST_ANSWER, AnswersText.text_answer_1),\n                                 (MainSiteLocators.SECOND_QUESTION, MainSiteLocators.SECOND_ANSWER, AnswersText.text_answer_2),\n                                 (MainSiteLocators.THIRD_QUESTION, MainSiteLocators.THIRD_ANSWER, AnswersText.text_answer_3),\n                                 (MainSiteLocators.FOURTH_QUESTION, MainSiteLocators.FOURTH_ANSWER, AnswersText.text_answer_4),\n                                 (MainSiteLocators.FIFTH_QUESTION, MainSiteLocators.FIFTH_ANSWER, AnswersText.text_answer_5),\n                                 (MainSiteLocators.SIXTH_QUESTION, MainSiteLocators.SIXTH_ANSWER, AnswersText.text_answer_6),\n                                 (MainSiteLocators.SEVENTH_QUESTION, MainSiteLocators.SEVENTH_ANSWER, AnswersText.text_answer_7),\n                                 (MainSiteLocators.EIGHTH_QUESTION, MainSiteLocators.EIGHTH_ANSWER, AnswersText.text_answer_8)\n                             ])\n    def test_answers_to_questions(self, question, answer, right_answer, driver):\n            MainPage(driver).click_button_cookies()\n            MainPage(driver).find_questions()\n>           WebDriverWait(driver, 3).until(ec.visibility_of_element_located(question)).click()\n\ntests\\test_question_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000208D3200CB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div id=\\\\\"accordion__headi...sys.mjs:202:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-4\" class=\"accordion__button\"> is not clickable at point (949,456) because another element <img src=\"/assets/scooter.png\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:333:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:202:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Проверяем, что при клике на вопросы о важном 1-8 будут развёрнуты ответы", "steps": [{"name": "Нажать на кнопку согласия куки \"да все привыкли\"", "status": "passed", "start": 1702804700630, "stop": 1702804700869}, {"name": "Проскроллить до блока с вопросами о важном", "status": "passed", "start": 1702804700870, "stop": 1702804700875}], "parameters": [{"name": "question", "value": "['id', 'accordion__heading-4']"}, {"name": "answer", "value": "['id', 'accordion__panel-4']"}, {"name": "right_answer", "value": "'Пока что нет! Но если что-то срочное — всегда можно позвонить в поддержку по красивому номеру 1010.'"}], "start": 1702804700630, "stop": 1702804700889, "uuid": "8316f838-ac19-46bd-baa3-f6aa92ad8930", "historyId": "1d12f3e40c1a311deae06dcb79a53fd6", "testCaseId": "f1d174cfe5105a43cb7ffbcf2a3a8ed5", "fullName": "tests.test_question_page.TestQuestionsPage#test_answers_to_questions", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_question_page"}, {"name": "subSuite", "value": "TestQuestionsPage"}, {"name": "host", "value": "DESKTOP-AQ71LTK"}, {"name": "thread", "value": "28200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_question_page"}]}